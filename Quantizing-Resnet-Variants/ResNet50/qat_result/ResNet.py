# GENETARED BY NNDCT, DO NOT EDIT!

import torch
from torch import tensor
import pytorch_nndct as py_nndct

class ResNet(py_nndct.nn.NndctQuantModel):
    def __init__(self):
        super(ResNet, self).__init__()
        self.module_0 = py_nndct.nn.Input() #ResNet::input_0(ResNet::nndct_input_0)
        self.module_1 = py_nndct.nn.quant_input() #ResNet::ResNet/QuantStub[quant_stub]/9039(ResNet::nndct_quant_stub_1)
        self.module_2 = py_nndct.nn.Conv2d(in_channels=3, out_channels=64, kernel_size=[7, 7], stride=[2, 2], padding=[3, 3], dilation=[1, 1], groups=1, bias=True) #ResNet::ResNet/Conv2d[conv1]/ret.5(ResNet::nndct_conv2d_2)
        self.module_3 = py_nndct.nn.ReLU(inplace=False) #ResNet::ResNet/ReLU[relu]/ret.9(ResNet::nndct_relu_3)
        self.module_4 = py_nndct.nn.MaxPool2d(kernel_size=[3, 3], stride=[2, 2], padding=[1, 1], dilation=[1, 1], ceil_mode=False) #ResNet::ResNet/MaxPool2d[maxpool]/9085(ResNet::nndct_maxpool_4)
        self.module_5 = py_nndct.nn.Conv2d(in_channels=64, out_channels=64, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #ResNet::ResNet/Sequential[layer1]/block[0]/Conv2d[conv1]/ret.11(ResNet::nndct_conv2d_5)
        self.module_6 = py_nndct.nn.ReLU(inplace=False) #ResNet::ResNet/Sequential[layer1]/block[0]/ReLU[relu1]/ret.15(ResNet::nndct_relu_6)
        self.module_7 = py_nndct.nn.Conv2d(in_channels=64, out_channels=64, kernel_size=[3, 3], stride=[1, 1], padding=[1, 1], dilation=[1, 1], groups=1, bias=True) #ResNet::ResNet/Sequential[layer1]/block[0]/Conv2d[conv2]/ret.17(ResNet::nndct_conv2d_7)
        self.module_8 = py_nndct.nn.ReLU(inplace=False) #ResNet::ResNet/Sequential[layer1]/block[0]/ReLU[relu2]/ret.21(ResNet::nndct_relu_8)
        self.module_9 = py_nndct.nn.Conv2d(in_channels=64, out_channels=256, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #ResNet::ResNet/Sequential[layer1]/block[0]/Conv2d[conv3]/ret.23(ResNet::nndct_conv2d_9)
        self.module_10 = py_nndct.nn.Conv2d(in_channels=64, out_channels=256, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #ResNet::ResNet/Sequential[layer1]/block[0]/Sequential[identity_downsample]/Conv2d[0]/ret.27(ResNet::nndct_conv2d_10)
        self.module_11 = py_nndct.nn.Add() #ResNet::ResNet/Sequential[layer1]/block[0]/9196(ResNet::nndct_elemwise_add_11)
        self.module_12 = py_nndct.nn.ReLU(inplace=False) #ResNet::ResNet/Sequential[layer1]/block[0]/ReLU[relu3]/ret.31(ResNet::nndct_relu_12)
        self.module_13 = py_nndct.nn.Conv2d(in_channels=256, out_channels=64, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #ResNet::ResNet/Sequential[layer1]/block[1]/Conv2d[conv1]/ret.33(ResNet::nndct_conv2d_13)
        self.module_14 = py_nndct.nn.ReLU(inplace=False) #ResNet::ResNet/Sequential[layer1]/block[1]/ReLU[relu1]/ret.37(ResNet::nndct_relu_14)
        self.module_15 = py_nndct.nn.Conv2d(in_channels=64, out_channels=64, kernel_size=[3, 3], stride=[1, 1], padding=[1, 1], dilation=[1, 1], groups=1, bias=True) #ResNet::ResNet/Sequential[layer1]/block[1]/Conv2d[conv2]/ret.39(ResNet::nndct_conv2d_15)
        self.module_16 = py_nndct.nn.ReLU(inplace=False) #ResNet::ResNet/Sequential[layer1]/block[1]/ReLU[relu2]/ret.43(ResNet::nndct_relu_16)
        self.module_17 = py_nndct.nn.Conv2d(in_channels=64, out_channels=256, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #ResNet::ResNet/Sequential[layer1]/block[1]/Conv2d[conv3]/ret.45(ResNet::nndct_conv2d_17)
        self.module_18 = py_nndct.nn.Add() #ResNet::ResNet/Sequential[layer1]/block[1]/9282(ResNet::nndct_elemwise_add_18)
        self.module_19 = py_nndct.nn.ReLU(inplace=False) #ResNet::ResNet/Sequential[layer1]/block[1]/ReLU[relu3]/ret.49(ResNet::nndct_relu_19)
        self.module_20 = py_nndct.nn.Conv2d(in_channels=256, out_channels=64, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #ResNet::ResNet/Sequential[layer1]/block[2]/Conv2d[conv1]/ret.51(ResNet::nndct_conv2d_20)
        self.module_21 = py_nndct.nn.ReLU(inplace=False) #ResNet::ResNet/Sequential[layer1]/block[2]/ReLU[relu1]/ret.55(ResNet::nndct_relu_21)
        self.module_22 = py_nndct.nn.Conv2d(in_channels=64, out_channels=64, kernel_size=[3, 3], stride=[1, 1], padding=[1, 1], dilation=[1, 1], groups=1, bias=True) #ResNet::ResNet/Sequential[layer1]/block[2]/Conv2d[conv2]/ret.57(ResNet::nndct_conv2d_22)
        self.module_23 = py_nndct.nn.ReLU(inplace=False) #ResNet::ResNet/Sequential[layer1]/block[2]/ReLU[relu2]/ret.61(ResNet::nndct_relu_23)
        self.module_24 = py_nndct.nn.Conv2d(in_channels=64, out_channels=256, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #ResNet::ResNet/Sequential[layer1]/block[2]/Conv2d[conv3]/ret.63(ResNet::nndct_conv2d_24)
        self.module_25 = py_nndct.nn.Add() #ResNet::ResNet/Sequential[layer1]/block[2]/9368(ResNet::nndct_elemwise_add_25)
        self.module_26 = py_nndct.nn.ReLU(inplace=False) #ResNet::ResNet/Sequential[layer1]/block[2]/ReLU[relu3]/ret.67(ResNet::nndct_relu_26)
        self.module_27 = py_nndct.nn.Conv2d(in_channels=256, out_channels=128, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #ResNet::ResNet/Sequential[layer2]/block[0]/Conv2d[conv1]/ret.69(ResNet::nndct_conv2d_27)
        self.module_28 = py_nndct.nn.ReLU(inplace=False) #ResNet::ResNet/Sequential[layer2]/block[0]/ReLU[relu1]/ret.73(ResNet::nndct_relu_28)
        self.module_29 = py_nndct.nn.Conv2d(in_channels=128, out_channels=128, kernel_size=[3, 3], stride=[2, 2], padding=[1, 1], dilation=[1, 1], groups=1, bias=True) #ResNet::ResNet/Sequential[layer2]/block[0]/Conv2d[conv2]/ret.75(ResNet::nndct_conv2d_29)
        self.module_30 = py_nndct.nn.ReLU(inplace=False) #ResNet::ResNet/Sequential[layer2]/block[0]/ReLU[relu2]/ret.79(ResNet::nndct_relu_30)
        self.module_31 = py_nndct.nn.Conv2d(in_channels=128, out_channels=512, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #ResNet::ResNet/Sequential[layer2]/block[0]/Conv2d[conv3]/ret.81(ResNet::nndct_conv2d_31)
        self.module_32 = py_nndct.nn.Conv2d(in_channels=256, out_channels=512, kernel_size=[1, 1], stride=[2, 2], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #ResNet::ResNet/Sequential[layer2]/block[0]/Sequential[identity_downsample]/Conv2d[0]/ret.85(ResNet::nndct_conv2d_32)
        self.module_33 = py_nndct.nn.Add() #ResNet::ResNet/Sequential[layer2]/block[0]/9480(ResNet::nndct_elemwise_add_33)
        self.module_34 = py_nndct.nn.ReLU(inplace=False) #ResNet::ResNet/Sequential[layer2]/block[0]/ReLU[relu3]/ret.89(ResNet::nndct_relu_34)
        self.module_35 = py_nndct.nn.Conv2d(in_channels=512, out_channels=128, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #ResNet::ResNet/Sequential[layer2]/block[1]/Conv2d[conv1]/ret.91(ResNet::nndct_conv2d_35)
        self.module_36 = py_nndct.nn.ReLU(inplace=False) #ResNet::ResNet/Sequential[layer2]/block[1]/ReLU[relu1]/ret.95(ResNet::nndct_relu_36)
        self.module_37 = py_nndct.nn.Conv2d(in_channels=128, out_channels=128, kernel_size=[3, 3], stride=[1, 1], padding=[1, 1], dilation=[1, 1], groups=1, bias=True) #ResNet::ResNet/Sequential[layer2]/block[1]/Conv2d[conv2]/ret.97(ResNet::nndct_conv2d_37)
        self.module_38 = py_nndct.nn.ReLU(inplace=False) #ResNet::ResNet/Sequential[layer2]/block[1]/ReLU[relu2]/ret.101(ResNet::nndct_relu_38)
        self.module_39 = py_nndct.nn.Conv2d(in_channels=128, out_channels=512, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #ResNet::ResNet/Sequential[layer2]/block[1]/Conv2d[conv3]/ret.103(ResNet::nndct_conv2d_39)
        self.module_40 = py_nndct.nn.Add() #ResNet::ResNet/Sequential[layer2]/block[1]/9566(ResNet::nndct_elemwise_add_40)
        self.module_41 = py_nndct.nn.ReLU(inplace=False) #ResNet::ResNet/Sequential[layer2]/block[1]/ReLU[relu3]/ret.107(ResNet::nndct_relu_41)
        self.module_42 = py_nndct.nn.Conv2d(in_channels=512, out_channels=128, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #ResNet::ResNet/Sequential[layer2]/block[2]/Conv2d[conv1]/ret.109(ResNet::nndct_conv2d_42)
        self.module_43 = py_nndct.nn.ReLU(inplace=False) #ResNet::ResNet/Sequential[layer2]/block[2]/ReLU[relu1]/ret.113(ResNet::nndct_relu_43)
        self.module_44 = py_nndct.nn.Conv2d(in_channels=128, out_channels=128, kernel_size=[3, 3], stride=[1, 1], padding=[1, 1], dilation=[1, 1], groups=1, bias=True) #ResNet::ResNet/Sequential[layer2]/block[2]/Conv2d[conv2]/ret.115(ResNet::nndct_conv2d_44)
        self.module_45 = py_nndct.nn.ReLU(inplace=False) #ResNet::ResNet/Sequential[layer2]/block[2]/ReLU[relu2]/ret.119(ResNet::nndct_relu_45)
        self.module_46 = py_nndct.nn.Conv2d(in_channels=128, out_channels=512, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #ResNet::ResNet/Sequential[layer2]/block[2]/Conv2d[conv3]/ret.121(ResNet::nndct_conv2d_46)
        self.module_47 = py_nndct.nn.Add() #ResNet::ResNet/Sequential[layer2]/block[2]/9652(ResNet::nndct_elemwise_add_47)
        self.module_48 = py_nndct.nn.ReLU(inplace=False) #ResNet::ResNet/Sequential[layer2]/block[2]/ReLU[relu3]/ret.125(ResNet::nndct_relu_48)
        self.module_49 = py_nndct.nn.Conv2d(in_channels=512, out_channels=128, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #ResNet::ResNet/Sequential[layer2]/block[3]/Conv2d[conv1]/ret.127(ResNet::nndct_conv2d_49)
        self.module_50 = py_nndct.nn.ReLU(inplace=False) #ResNet::ResNet/Sequential[layer2]/block[3]/ReLU[relu1]/ret.131(ResNet::nndct_relu_50)
        self.module_51 = py_nndct.nn.Conv2d(in_channels=128, out_channels=128, kernel_size=[3, 3], stride=[1, 1], padding=[1, 1], dilation=[1, 1], groups=1, bias=True) #ResNet::ResNet/Sequential[layer2]/block[3]/Conv2d[conv2]/ret.133(ResNet::nndct_conv2d_51)
        self.module_52 = py_nndct.nn.ReLU(inplace=False) #ResNet::ResNet/Sequential[layer2]/block[3]/ReLU[relu2]/ret.137(ResNet::nndct_relu_52)
        self.module_53 = py_nndct.nn.Conv2d(in_channels=128, out_channels=512, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #ResNet::ResNet/Sequential[layer2]/block[3]/Conv2d[conv3]/ret.139(ResNet::nndct_conv2d_53)
        self.module_54 = py_nndct.nn.Add() #ResNet::ResNet/Sequential[layer2]/block[3]/9738(ResNet::nndct_elemwise_add_54)
        self.module_55 = py_nndct.nn.ReLU(inplace=False) #ResNet::ResNet/Sequential[layer2]/block[3]/ReLU[relu3]/ret.143(ResNet::nndct_relu_55)
        self.module_56 = py_nndct.nn.Conv2d(in_channels=512, out_channels=256, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #ResNet::ResNet/Sequential[layer3]/block[0]/Conv2d[conv1]/ret.145(ResNet::nndct_conv2d_56)
        self.module_57 = py_nndct.nn.ReLU(inplace=False) #ResNet::ResNet/Sequential[layer3]/block[0]/ReLU[relu1]/ret.149(ResNet::nndct_relu_57)
        self.module_58 = py_nndct.nn.Conv2d(in_channels=256, out_channels=256, kernel_size=[3, 3], stride=[2, 2], padding=[1, 1], dilation=[1, 1], groups=1, bias=True) #ResNet::ResNet/Sequential[layer3]/block[0]/Conv2d[conv2]/ret.151(ResNet::nndct_conv2d_58)
        self.module_59 = py_nndct.nn.ReLU(inplace=False) #ResNet::ResNet/Sequential[layer3]/block[0]/ReLU[relu2]/ret.155(ResNet::nndct_relu_59)
        self.module_60 = py_nndct.nn.Conv2d(in_channels=256, out_channels=1024, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #ResNet::ResNet/Sequential[layer3]/block[0]/Conv2d[conv3]/ret.157(ResNet::nndct_conv2d_60)
        self.module_61 = py_nndct.nn.Conv2d(in_channels=512, out_channels=1024, kernel_size=[1, 1], stride=[2, 2], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #ResNet::ResNet/Sequential[layer3]/block[0]/Sequential[identity_downsample]/Conv2d[0]/ret.161(ResNet::nndct_conv2d_61)
        self.module_62 = py_nndct.nn.Add() #ResNet::ResNet/Sequential[layer3]/block[0]/9850(ResNet::nndct_elemwise_add_62)
        self.module_63 = py_nndct.nn.ReLU(inplace=False) #ResNet::ResNet/Sequential[layer3]/block[0]/ReLU[relu3]/ret.165(ResNet::nndct_relu_63)
        self.module_64 = py_nndct.nn.Conv2d(in_channels=1024, out_channels=256, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #ResNet::ResNet/Sequential[layer3]/block[1]/Conv2d[conv1]/ret.167(ResNet::nndct_conv2d_64)
        self.module_65 = py_nndct.nn.ReLU(inplace=False) #ResNet::ResNet/Sequential[layer3]/block[1]/ReLU[relu1]/ret.171(ResNet::nndct_relu_65)
        self.module_66 = py_nndct.nn.Conv2d(in_channels=256, out_channels=256, kernel_size=[3, 3], stride=[1, 1], padding=[1, 1], dilation=[1, 1], groups=1, bias=True) #ResNet::ResNet/Sequential[layer3]/block[1]/Conv2d[conv2]/ret.173(ResNet::nndct_conv2d_66)
        self.module_67 = py_nndct.nn.ReLU(inplace=False) #ResNet::ResNet/Sequential[layer3]/block[1]/ReLU[relu2]/ret.177(ResNet::nndct_relu_67)
        self.module_68 = py_nndct.nn.Conv2d(in_channels=256, out_channels=1024, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #ResNet::ResNet/Sequential[layer3]/block[1]/Conv2d[conv3]/ret.179(ResNet::nndct_conv2d_68)
        self.module_69 = py_nndct.nn.Add() #ResNet::ResNet/Sequential[layer3]/block[1]/9936(ResNet::nndct_elemwise_add_69)
        self.module_70 = py_nndct.nn.ReLU(inplace=False) #ResNet::ResNet/Sequential[layer3]/block[1]/ReLU[relu3]/ret.183(ResNet::nndct_relu_70)
        self.module_71 = py_nndct.nn.Conv2d(in_channels=1024, out_channels=256, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #ResNet::ResNet/Sequential[layer3]/block[2]/Conv2d[conv1]/ret.185(ResNet::nndct_conv2d_71)
        self.module_72 = py_nndct.nn.ReLU(inplace=False) #ResNet::ResNet/Sequential[layer3]/block[2]/ReLU[relu1]/ret.189(ResNet::nndct_relu_72)
        self.module_73 = py_nndct.nn.Conv2d(in_channels=256, out_channels=256, kernel_size=[3, 3], stride=[1, 1], padding=[1, 1], dilation=[1, 1], groups=1, bias=True) #ResNet::ResNet/Sequential[layer3]/block[2]/Conv2d[conv2]/ret.191(ResNet::nndct_conv2d_73)
        self.module_74 = py_nndct.nn.ReLU(inplace=False) #ResNet::ResNet/Sequential[layer3]/block[2]/ReLU[relu2]/ret.195(ResNet::nndct_relu_74)
        self.module_75 = py_nndct.nn.Conv2d(in_channels=256, out_channels=1024, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #ResNet::ResNet/Sequential[layer3]/block[2]/Conv2d[conv3]/ret.197(ResNet::nndct_conv2d_75)
        self.module_76 = py_nndct.nn.Add() #ResNet::ResNet/Sequential[layer3]/block[2]/10022(ResNet::nndct_elemwise_add_76)
        self.module_77 = py_nndct.nn.ReLU(inplace=False) #ResNet::ResNet/Sequential[layer3]/block[2]/ReLU[relu3]/ret.201(ResNet::nndct_relu_77)
        self.module_78 = py_nndct.nn.Conv2d(in_channels=1024, out_channels=256, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #ResNet::ResNet/Sequential[layer3]/block[3]/Conv2d[conv1]/ret.203(ResNet::nndct_conv2d_78)
        self.module_79 = py_nndct.nn.ReLU(inplace=False) #ResNet::ResNet/Sequential[layer3]/block[3]/ReLU[relu1]/ret.207(ResNet::nndct_relu_79)
        self.module_80 = py_nndct.nn.Conv2d(in_channels=256, out_channels=256, kernel_size=[3, 3], stride=[1, 1], padding=[1, 1], dilation=[1, 1], groups=1, bias=True) #ResNet::ResNet/Sequential[layer3]/block[3]/Conv2d[conv2]/ret.209(ResNet::nndct_conv2d_80)
        self.module_81 = py_nndct.nn.ReLU(inplace=False) #ResNet::ResNet/Sequential[layer3]/block[3]/ReLU[relu2]/ret.213(ResNet::nndct_relu_81)
        self.module_82 = py_nndct.nn.Conv2d(in_channels=256, out_channels=1024, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #ResNet::ResNet/Sequential[layer3]/block[3]/Conv2d[conv3]/ret.215(ResNet::nndct_conv2d_82)
        self.module_83 = py_nndct.nn.Add() #ResNet::ResNet/Sequential[layer3]/block[3]/10108(ResNet::nndct_elemwise_add_83)
        self.module_84 = py_nndct.nn.ReLU(inplace=False) #ResNet::ResNet/Sequential[layer3]/block[3]/ReLU[relu3]/ret.219(ResNet::nndct_relu_84)
        self.module_85 = py_nndct.nn.Conv2d(in_channels=1024, out_channels=256, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #ResNet::ResNet/Sequential[layer3]/block[4]/Conv2d[conv1]/ret.221(ResNet::nndct_conv2d_85)
        self.module_86 = py_nndct.nn.ReLU(inplace=False) #ResNet::ResNet/Sequential[layer3]/block[4]/ReLU[relu1]/ret.225(ResNet::nndct_relu_86)
        self.module_87 = py_nndct.nn.Conv2d(in_channels=256, out_channels=256, kernel_size=[3, 3], stride=[1, 1], padding=[1, 1], dilation=[1, 1], groups=1, bias=True) #ResNet::ResNet/Sequential[layer3]/block[4]/Conv2d[conv2]/ret.227(ResNet::nndct_conv2d_87)
        self.module_88 = py_nndct.nn.ReLU(inplace=False) #ResNet::ResNet/Sequential[layer3]/block[4]/ReLU[relu2]/ret.231(ResNet::nndct_relu_88)
        self.module_89 = py_nndct.nn.Conv2d(in_channels=256, out_channels=1024, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #ResNet::ResNet/Sequential[layer3]/block[4]/Conv2d[conv3]/ret.233(ResNet::nndct_conv2d_89)
        self.module_90 = py_nndct.nn.Add() #ResNet::ResNet/Sequential[layer3]/block[4]/10194(ResNet::nndct_elemwise_add_90)
        self.module_91 = py_nndct.nn.ReLU(inplace=False) #ResNet::ResNet/Sequential[layer3]/block[4]/ReLU[relu3]/ret.237(ResNet::nndct_relu_91)
        self.module_92 = py_nndct.nn.Conv2d(in_channels=1024, out_channels=256, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #ResNet::ResNet/Sequential[layer3]/block[5]/Conv2d[conv1]/ret.239(ResNet::nndct_conv2d_92)
        self.module_93 = py_nndct.nn.ReLU(inplace=False) #ResNet::ResNet/Sequential[layer3]/block[5]/ReLU[relu1]/ret.243(ResNet::nndct_relu_93)
        self.module_94 = py_nndct.nn.Conv2d(in_channels=256, out_channels=256, kernel_size=[3, 3], stride=[1, 1], padding=[1, 1], dilation=[1, 1], groups=1, bias=True) #ResNet::ResNet/Sequential[layer3]/block[5]/Conv2d[conv2]/ret.245(ResNet::nndct_conv2d_94)
        self.module_95 = py_nndct.nn.ReLU(inplace=False) #ResNet::ResNet/Sequential[layer3]/block[5]/ReLU[relu2]/ret.249(ResNet::nndct_relu_95)
        self.module_96 = py_nndct.nn.Conv2d(in_channels=256, out_channels=1024, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #ResNet::ResNet/Sequential[layer3]/block[5]/Conv2d[conv3]/ret.251(ResNet::nndct_conv2d_96)
        self.module_97 = py_nndct.nn.Add() #ResNet::ResNet/Sequential[layer3]/block[5]/10280(ResNet::nndct_elemwise_add_97)
        self.module_98 = py_nndct.nn.ReLU(inplace=False) #ResNet::ResNet/Sequential[layer3]/block[5]/ReLU[relu3]/ret.255(ResNet::nndct_relu_98)
        self.module_99 = py_nndct.nn.Conv2d(in_channels=1024, out_channels=512, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #ResNet::ResNet/Sequential[layer4]/block[0]/Conv2d[conv1]/ret.257(ResNet::nndct_conv2d_99)
        self.module_100 = py_nndct.nn.ReLU(inplace=False) #ResNet::ResNet/Sequential[layer4]/block[0]/ReLU[relu1]/ret.261(ResNet::nndct_relu_100)
        self.module_101 = py_nndct.nn.Conv2d(in_channels=512, out_channels=512, kernel_size=[3, 3], stride=[2, 2], padding=[1, 1], dilation=[1, 1], groups=1, bias=True) #ResNet::ResNet/Sequential[layer4]/block[0]/Conv2d[conv2]/ret.263(ResNet::nndct_conv2d_101)
        self.module_102 = py_nndct.nn.ReLU(inplace=False) #ResNet::ResNet/Sequential[layer4]/block[0]/ReLU[relu2]/ret.267(ResNet::nndct_relu_102)
        self.module_103 = py_nndct.nn.Conv2d(in_channels=512, out_channels=2048, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #ResNet::ResNet/Sequential[layer4]/block[0]/Conv2d[conv3]/ret.269(ResNet::nndct_conv2d_103)
        self.module_104 = py_nndct.nn.Conv2d(in_channels=1024, out_channels=2048, kernel_size=[1, 1], stride=[2, 2], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #ResNet::ResNet/Sequential[layer4]/block[0]/Sequential[identity_downsample]/Conv2d[0]/ret.273(ResNet::nndct_conv2d_104)
        self.module_105 = py_nndct.nn.Add() #ResNet::ResNet/Sequential[layer4]/block[0]/10392(ResNet::nndct_elemwise_add_105)
        self.module_106 = py_nndct.nn.ReLU(inplace=False) #ResNet::ResNet/Sequential[layer4]/block[0]/ReLU[relu3]/ret.277(ResNet::nndct_relu_106)
        self.module_107 = py_nndct.nn.Conv2d(in_channels=2048, out_channels=512, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #ResNet::ResNet/Sequential[layer4]/block[1]/Conv2d[conv1]/ret.279(ResNet::nndct_conv2d_107)
        self.module_108 = py_nndct.nn.ReLU(inplace=False) #ResNet::ResNet/Sequential[layer4]/block[1]/ReLU[relu1]/ret.283(ResNet::nndct_relu_108)
        self.module_109 = py_nndct.nn.Conv2d(in_channels=512, out_channels=512, kernel_size=[3, 3], stride=[1, 1], padding=[1, 1], dilation=[1, 1], groups=1, bias=True) #ResNet::ResNet/Sequential[layer4]/block[1]/Conv2d[conv2]/ret.285(ResNet::nndct_conv2d_109)
        self.module_110 = py_nndct.nn.ReLU(inplace=False) #ResNet::ResNet/Sequential[layer4]/block[1]/ReLU[relu2]/ret.289(ResNet::nndct_relu_110)
        self.module_111 = py_nndct.nn.Conv2d(in_channels=512, out_channels=2048, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #ResNet::ResNet/Sequential[layer4]/block[1]/Conv2d[conv3]/ret.291(ResNet::nndct_conv2d_111)
        self.module_112 = py_nndct.nn.Add() #ResNet::ResNet/Sequential[layer4]/block[1]/10478(ResNet::nndct_elemwise_add_112)
        self.module_113 = py_nndct.nn.ReLU(inplace=False) #ResNet::ResNet/Sequential[layer4]/block[1]/ReLU[relu3]/ret.295(ResNet::nndct_relu_113)
        self.module_114 = py_nndct.nn.Conv2d(in_channels=2048, out_channels=512, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #ResNet::ResNet/Sequential[layer4]/block[2]/Conv2d[conv1]/ret.297(ResNet::nndct_conv2d_114)
        self.module_115 = py_nndct.nn.ReLU(inplace=False) #ResNet::ResNet/Sequential[layer4]/block[2]/ReLU[relu1]/ret.301(ResNet::nndct_relu_115)
        self.module_116 = py_nndct.nn.Conv2d(in_channels=512, out_channels=512, kernel_size=[3, 3], stride=[1, 1], padding=[1, 1], dilation=[1, 1], groups=1, bias=True) #ResNet::ResNet/Sequential[layer4]/block[2]/Conv2d[conv2]/ret.303(ResNet::nndct_conv2d_116)
        self.module_117 = py_nndct.nn.ReLU(inplace=False) #ResNet::ResNet/Sequential[layer4]/block[2]/ReLU[relu2]/ret.307(ResNet::nndct_relu_117)
        self.module_118 = py_nndct.nn.Conv2d(in_channels=512, out_channels=2048, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #ResNet::ResNet/Sequential[layer4]/block[2]/Conv2d[conv3]/ret.309(ResNet::nndct_conv2d_118)
        self.module_119 = py_nndct.nn.Add() #ResNet::ResNet/Sequential[layer4]/block[2]/10564(ResNet::nndct_elemwise_add_119)
        self.module_120 = py_nndct.nn.ReLU(inplace=False) #ResNet::ResNet/Sequential[layer4]/block[2]/ReLU[relu3]/ret.313(ResNet::nndct_relu_120)
        self.module_121 = py_nndct.nn.AdaptiveAvgPool2d(output_size=[1, 1]) #ResNet::ResNet/AdaptiveAvgPool2d[avgpool]/10583(ResNet::nndct_adaptive_avg_pool2d_121)
        self.module_122 = py_nndct.nn.Module('nndct_shape') #ResNet::ResNet/10586(ResNet::nndct_shape_122)
        self.module_123 = py_nndct.nn.Module('nndct_reshape') #ResNet::ResNet/ret.315(ResNet::nndct_reshape_123)
        self.module_124 = py_nndct.nn.Linear(in_features=2048, out_features=3, bias=True) #ResNet::ResNet/Linear[fc]/ret.317(ResNet::nndct_dense_124)
        self.module_125 = py_nndct.nn.dequant_output() #ResNet::ResNet/DeQuantStub[dequant_stub]/10608(ResNet::nndct_dequant_stub_125)

    @py_nndct.nn.forward_processor
    def forward(self, *args):
        output_module_0 = self.module_0(input=args[0])
        output_module_0 = self.module_1(input=output_module_0)
        output_module_0 = self.module_2(output_module_0)
        output_module_0 = self.module_3(output_module_0)
        output_module_0 = self.module_4(output_module_0)
        output_module_5 = self.module_5(output_module_0)
        output_module_5 = self.module_6(output_module_5)
        output_module_5 = self.module_7(output_module_5)
        output_module_5 = self.module_8(output_module_5)
        output_module_5 = self.module_9(output_module_5)
        output_module_10 = self.module_10(output_module_0)
        output_module_5 = self.module_11(input=output_module_5, other=output_module_10, alpha=1)
        output_module_5 = self.module_12(output_module_5)
        output_module_13 = self.module_13(output_module_5)
        output_module_13 = self.module_14(output_module_13)
        output_module_13 = self.module_15(output_module_13)
        output_module_13 = self.module_16(output_module_13)
        output_module_13 = self.module_17(output_module_13)
        output_module_13 = self.module_18(input=output_module_13, other=output_module_5, alpha=1)
        output_module_13 = self.module_19(output_module_13)
        output_module_20 = self.module_20(output_module_13)
        output_module_20 = self.module_21(output_module_20)
        output_module_20 = self.module_22(output_module_20)
        output_module_20 = self.module_23(output_module_20)
        output_module_20 = self.module_24(output_module_20)
        output_module_20 = self.module_25(input=output_module_20, other=output_module_13, alpha=1)
        output_module_20 = self.module_26(output_module_20)
        output_module_27 = self.module_27(output_module_20)
        output_module_27 = self.module_28(output_module_27)
        output_module_27 = self.module_29(output_module_27)
        output_module_27 = self.module_30(output_module_27)
        output_module_27 = self.module_31(output_module_27)
        output_module_32 = self.module_32(output_module_20)
        output_module_27 = self.module_33(input=output_module_27, other=output_module_32, alpha=1)
        output_module_27 = self.module_34(output_module_27)
        output_module_35 = self.module_35(output_module_27)
        output_module_35 = self.module_36(output_module_35)
        output_module_35 = self.module_37(output_module_35)
        output_module_35 = self.module_38(output_module_35)
        output_module_35 = self.module_39(output_module_35)
        output_module_35 = self.module_40(input=output_module_35, other=output_module_27, alpha=1)
        output_module_35 = self.module_41(output_module_35)
        output_module_42 = self.module_42(output_module_35)
        output_module_42 = self.module_43(output_module_42)
        output_module_42 = self.module_44(output_module_42)
        output_module_42 = self.module_45(output_module_42)
        output_module_42 = self.module_46(output_module_42)
        output_module_42 = self.module_47(input=output_module_42, other=output_module_35, alpha=1)
        output_module_42 = self.module_48(output_module_42)
        output_module_49 = self.module_49(output_module_42)
        output_module_49 = self.module_50(output_module_49)
        output_module_49 = self.module_51(output_module_49)
        output_module_49 = self.module_52(output_module_49)
        output_module_49 = self.module_53(output_module_49)
        output_module_49 = self.module_54(input=output_module_49, other=output_module_42, alpha=1)
        output_module_49 = self.module_55(output_module_49)
        output_module_56 = self.module_56(output_module_49)
        output_module_56 = self.module_57(output_module_56)
        output_module_56 = self.module_58(output_module_56)
        output_module_56 = self.module_59(output_module_56)
        output_module_56 = self.module_60(output_module_56)
        output_module_61 = self.module_61(output_module_49)
        output_module_56 = self.module_62(input=output_module_56, other=output_module_61, alpha=1)
        output_module_56 = self.module_63(output_module_56)
        output_module_64 = self.module_64(output_module_56)
        output_module_64 = self.module_65(output_module_64)
        output_module_64 = self.module_66(output_module_64)
        output_module_64 = self.module_67(output_module_64)
        output_module_64 = self.module_68(output_module_64)
        output_module_64 = self.module_69(input=output_module_64, other=output_module_56, alpha=1)
        output_module_64 = self.module_70(output_module_64)
        output_module_71 = self.module_71(output_module_64)
        output_module_71 = self.module_72(output_module_71)
        output_module_71 = self.module_73(output_module_71)
        output_module_71 = self.module_74(output_module_71)
        output_module_71 = self.module_75(output_module_71)
        output_module_71 = self.module_76(input=output_module_71, other=output_module_64, alpha=1)
        output_module_71 = self.module_77(output_module_71)
        output_module_78 = self.module_78(output_module_71)
        output_module_78 = self.module_79(output_module_78)
        output_module_78 = self.module_80(output_module_78)
        output_module_78 = self.module_81(output_module_78)
        output_module_78 = self.module_82(output_module_78)
        output_module_78 = self.module_83(input=output_module_78, other=output_module_71, alpha=1)
        output_module_78 = self.module_84(output_module_78)
        output_module_85 = self.module_85(output_module_78)
        output_module_85 = self.module_86(output_module_85)
        output_module_85 = self.module_87(output_module_85)
        output_module_85 = self.module_88(output_module_85)
        output_module_85 = self.module_89(output_module_85)
        output_module_85 = self.module_90(input=output_module_85, other=output_module_78, alpha=1)
        output_module_85 = self.module_91(output_module_85)
        output_module_92 = self.module_92(output_module_85)
        output_module_92 = self.module_93(output_module_92)
        output_module_92 = self.module_94(output_module_92)
        output_module_92 = self.module_95(output_module_92)
        output_module_92 = self.module_96(output_module_92)
        output_module_92 = self.module_97(input=output_module_92, other=output_module_85, alpha=1)
        output_module_92 = self.module_98(output_module_92)
        output_module_99 = self.module_99(output_module_92)
        output_module_99 = self.module_100(output_module_99)
        output_module_99 = self.module_101(output_module_99)
        output_module_99 = self.module_102(output_module_99)
        output_module_99 = self.module_103(output_module_99)
        output_module_104 = self.module_104(output_module_92)
        output_module_99 = self.module_105(input=output_module_99, other=output_module_104, alpha=1)
        output_module_99 = self.module_106(output_module_99)
        output_module_107 = self.module_107(output_module_99)
        output_module_107 = self.module_108(output_module_107)
        output_module_107 = self.module_109(output_module_107)
        output_module_107 = self.module_110(output_module_107)
        output_module_107 = self.module_111(output_module_107)
        output_module_107 = self.module_112(input=output_module_107, other=output_module_99, alpha=1)
        output_module_107 = self.module_113(output_module_107)
        output_module_114 = self.module_114(output_module_107)
        output_module_114 = self.module_115(output_module_114)
        output_module_114 = self.module_116(output_module_114)
        output_module_114 = self.module_117(output_module_114)
        output_module_114 = self.module_118(output_module_114)
        output_module_114 = self.module_119(input=output_module_114, other=output_module_107, alpha=1)
        output_module_114 = self.module_120(output_module_114)
        output_module_114 = self.module_121(output_module_114)
        output_module_122 = self.module_122(input=output_module_114, dim=0)
        output_module_123 = self.module_123(input=output_module_114, shape=[output_module_122,-1])
        output_module_123 = self.module_124(output_module_123)
        output_module_123 = self.module_125(input=output_module_123)
        return output_module_123
