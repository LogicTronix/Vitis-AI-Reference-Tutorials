# GENETARED BY NNDCT, DO NOT EDIT!

import torch
from torch import tensor
import pytorch_nndct as py_nndct

class EfficientNet(py_nndct.nn.NndctQuantModel):
    def __init__(self):
        super(EfficientNet, self).__init__()
        self.module_0 = py_nndct.nn.Input() #EfficientNet::input_0(EfficientNet::nndct_input_0)
        self.module_1 = py_nndct.nn.quant_input() #EfficientNet::EfficientNet/QuantStub[quant_stub]/22745(EfficientNet::nndct_quant_stub_1)
        self.module_2 = py_nndct.nn.Conv2d(in_channels=3, out_channels=32, kernel_size=[3, 3], stride=[2, 2], padding=[1, 1], dilation=[1, 1], groups=1, bias=True) #EfficientNet::EfficientNet/Sequential[features]/CNNBlock[0]/Conv2d[cnn]/ret.5(EfficientNet::nndct_conv2d_2)
        self.module_3 = py_nndct.nn.Hardswish(inplace=False) #EfficientNet::EfficientNet/Sequential[features]/CNNBlock[0]/Hardswish[hard_swish]/ret.9(EfficientNet::nndct_hswish_3)
        self.module_4 = py_nndct.nn.Conv2d(in_channels=32, out_channels=32, kernel_size=[3, 3], stride=[1, 1], padding=[1, 1], dilation=[1, 1], groups=32, bias=True) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[1]/Sequential[conv]/CNNBlock[0]/Conv2d[cnn]/ret.11(EfficientNet::nndct_depthwise_conv2d_4)
        self.module_5 = py_nndct.nn.Hardswish(inplace=False) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[1]/Sequential[conv]/CNNBlock[0]/Hardswish[hard_swish]/ret.15(EfficientNet::nndct_hswish_5)
        self.module_6 = py_nndct.nn.AdaptiveAvgPool2d(output_size=[1, 1]) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[1]/Sequential[conv]/SqueezeExcitation[1]/Sequential[se]/AdaptiveAvgPool2d[0]/22855(EfficientNet::nndct_adaptive_avg_pool2d_6)
        self.module_7 = py_nndct.nn.Conv2d(in_channels=32, out_channels=8, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[1]/Sequential[conv]/SqueezeExcitation[1]/Sequential[se]/Conv2d[1]/ret.17(EfficientNet::nndct_conv2d_7)
        self.module_8 = py_nndct.nn.Hardswish(inplace=False) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[1]/Sequential[conv]/SqueezeExcitation[1]/Sequential[se]/Hardswish[2]/ret.19(EfficientNet::nndct_hswish_8)
        self.module_9 = py_nndct.nn.Conv2d(in_channels=8, out_channels=32, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[1]/Sequential[conv]/SqueezeExcitation[1]/Sequential[se]/Conv2d[3]/ret.21(EfficientNet::nndct_conv2d_9)
        self.module_10 = py_nndct.nn.Sigmoid() #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[1]/Sequential[conv]/SqueezeExcitation[1]/Sequential[se]/Sigmoid[4]/ret.23(EfficientNet::nndct_sigmoid_10)
        self.module_11 = py_nndct.nn.Module('nndct_elemwise_mul') #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[1]/Sequential[conv]/SqueezeExcitation[1]/ret.25(EfficientNet::nndct_elemwise_mul_11)
        self.module_12 = py_nndct.nn.Conv2d(in_channels=32, out_channels=16, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[1]/Sequential[conv]/Conv2d[2]/ret.27(EfficientNet::nndct_conv2d_12)
        self.module_13 = py_nndct.nn.Conv2d(in_channels=16, out_channels=96, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[2]/CNNBlock[expand_conv]/Conv2d[cnn]/ret.31(EfficientNet::nndct_conv2d_13)
        self.module_14 = py_nndct.nn.Hardswish(inplace=False) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[2]/CNNBlock[expand_conv]/Hardswish[hard_swish]/ret.35(EfficientNet::nndct_hswish_14)
        self.module_15 = py_nndct.nn.Conv2d(in_channels=96, out_channels=96, kernel_size=[3, 3], stride=[2, 2], padding=[1, 1], dilation=[1, 1], groups=96, bias=True) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[2]/Sequential[conv]/CNNBlock[0]/Conv2d[cnn]/ret.37(EfficientNet::nndct_depthwise_conv2d_15)
        self.module_16 = py_nndct.nn.Hardswish(inplace=False) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[2]/Sequential[conv]/CNNBlock[0]/Hardswish[hard_swish]/ret.41(EfficientNet::nndct_hswish_16)
        self.module_17 = py_nndct.nn.AdaptiveAvgPool2d(output_size=[1, 1]) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[2]/Sequential[conv]/SqueezeExcitation[1]/Sequential[se]/AdaptiveAvgPool2d[0]/23036(EfficientNet::nndct_adaptive_avg_pool2d_17)
        self.module_18 = py_nndct.nn.Conv2d(in_channels=96, out_channels=4, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[2]/Sequential[conv]/SqueezeExcitation[1]/Sequential[se]/Conv2d[1]/ret.43(EfficientNet::nndct_conv2d_18)
        self.module_19 = py_nndct.nn.Hardswish(inplace=False) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[2]/Sequential[conv]/SqueezeExcitation[1]/Sequential[se]/Hardswish[2]/ret.45(EfficientNet::nndct_hswish_19)
        self.module_20 = py_nndct.nn.Conv2d(in_channels=4, out_channels=96, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[2]/Sequential[conv]/SqueezeExcitation[1]/Sequential[se]/Conv2d[3]/ret.47(EfficientNet::nndct_conv2d_20)
        self.module_21 = py_nndct.nn.Sigmoid() #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[2]/Sequential[conv]/SqueezeExcitation[1]/Sequential[se]/Sigmoid[4]/ret.49(EfficientNet::nndct_sigmoid_21)
        self.module_22 = py_nndct.nn.Module('nndct_elemwise_mul') #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[2]/Sequential[conv]/SqueezeExcitation[1]/ret.51(EfficientNet::nndct_elemwise_mul_22)
        self.module_23 = py_nndct.nn.Conv2d(in_channels=96, out_channels=24, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[2]/Sequential[conv]/Conv2d[2]/ret.53(EfficientNet::nndct_conv2d_23)
        self.module_24 = py_nndct.nn.Conv2d(in_channels=24, out_channels=144, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[3]/CNNBlock[expand_conv]/Conv2d[cnn]/ret.57(EfficientNet::nndct_conv2d_24)
        self.module_25 = py_nndct.nn.Hardswish(inplace=False) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[3]/CNNBlock[expand_conv]/Hardswish[hard_swish]/ret.61(EfficientNet::nndct_hswish_25)
        self.module_26 = py_nndct.nn.Conv2d(in_channels=144, out_channels=144, kernel_size=[3, 3], stride=[1, 1], padding=[1, 1], dilation=[1, 1], groups=144, bias=True) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[3]/Sequential[conv]/CNNBlock[0]/Conv2d[cnn]/ret.63(EfficientNet::nndct_depthwise_conv2d_26)
        self.module_27 = py_nndct.nn.Hardswish(inplace=False) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[3]/Sequential[conv]/CNNBlock[0]/Hardswish[hard_swish]/ret.67(EfficientNet::nndct_hswish_27)
        self.module_28 = py_nndct.nn.AdaptiveAvgPool2d(output_size=[1, 1]) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[3]/Sequential[conv]/SqueezeExcitation[1]/Sequential[se]/AdaptiveAvgPool2d[0]/23217(EfficientNet::nndct_adaptive_avg_pool2d_28)
        self.module_29 = py_nndct.nn.Conv2d(in_channels=144, out_channels=6, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[3]/Sequential[conv]/SqueezeExcitation[1]/Sequential[se]/Conv2d[1]/ret.69(EfficientNet::nndct_conv2d_29)
        self.module_30 = py_nndct.nn.Hardswish(inplace=False) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[3]/Sequential[conv]/SqueezeExcitation[1]/Sequential[se]/Hardswish[2]/ret.71(EfficientNet::nndct_hswish_30)
        self.module_31 = py_nndct.nn.Conv2d(in_channels=6, out_channels=144, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[3]/Sequential[conv]/SqueezeExcitation[1]/Sequential[se]/Conv2d[3]/ret.73(EfficientNet::nndct_conv2d_31)
        self.module_32 = py_nndct.nn.Sigmoid() #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[3]/Sequential[conv]/SqueezeExcitation[1]/Sequential[se]/Sigmoid[4]/ret.75(EfficientNet::nndct_sigmoid_32)
        self.module_33 = py_nndct.nn.Module('nndct_elemwise_mul') #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[3]/Sequential[conv]/SqueezeExcitation[1]/ret.77(EfficientNet::nndct_elemwise_mul_33)
        self.module_34 = py_nndct.nn.Conv2d(in_channels=144, out_channels=24, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[3]/Sequential[conv]/Conv2d[2]/ret.79(EfficientNet::nndct_conv2d_34)
        self.module_35 = py_nndct.nn.Add() #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[3]/Add[skip_add]/ret.83(EfficientNet::nndct_elemwise_add_35)
        self.module_36 = py_nndct.nn.Conv2d(in_channels=24, out_channels=144, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[4]/CNNBlock[expand_conv]/Conv2d[cnn]/ret.85(EfficientNet::nndct_conv2d_36)
        self.module_37 = py_nndct.nn.Hardswish(inplace=False) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[4]/CNNBlock[expand_conv]/Hardswish[hard_swish]/ret.89(EfficientNet::nndct_hswish_37)
        self.module_38 = py_nndct.nn.Conv2d(in_channels=144, out_channels=144, kernel_size=[5, 5], stride=[2, 2], padding=[2, 2], dilation=[1, 1], groups=144, bias=True) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[4]/Sequential[conv]/CNNBlock[0]/Conv2d[cnn]/ret.91(EfficientNet::nndct_depthwise_conv2d_38)
        self.module_39 = py_nndct.nn.Hardswish(inplace=False) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[4]/Sequential[conv]/CNNBlock[0]/Hardswish[hard_swish]/ret.95(EfficientNet::nndct_hswish_39)
        self.module_40 = py_nndct.nn.AdaptiveAvgPool2d(output_size=[1, 1]) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[4]/Sequential[conv]/SqueezeExcitation[1]/Sequential[se]/AdaptiveAvgPool2d[0]/23401(EfficientNet::nndct_adaptive_avg_pool2d_40)
        self.module_41 = py_nndct.nn.Conv2d(in_channels=144, out_channels=6, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[4]/Sequential[conv]/SqueezeExcitation[1]/Sequential[se]/Conv2d[1]/ret.97(EfficientNet::nndct_conv2d_41)
        self.module_42 = py_nndct.nn.Hardswish(inplace=False) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[4]/Sequential[conv]/SqueezeExcitation[1]/Sequential[se]/Hardswish[2]/ret.99(EfficientNet::nndct_hswish_42)
        self.module_43 = py_nndct.nn.Conv2d(in_channels=6, out_channels=144, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[4]/Sequential[conv]/SqueezeExcitation[1]/Sequential[se]/Conv2d[3]/ret.101(EfficientNet::nndct_conv2d_43)
        self.module_44 = py_nndct.nn.Sigmoid() #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[4]/Sequential[conv]/SqueezeExcitation[1]/Sequential[se]/Sigmoid[4]/ret.103(EfficientNet::nndct_sigmoid_44)
        self.module_45 = py_nndct.nn.Module('nndct_elemwise_mul') #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[4]/Sequential[conv]/SqueezeExcitation[1]/ret.105(EfficientNet::nndct_elemwise_mul_45)
        self.module_46 = py_nndct.nn.Conv2d(in_channels=144, out_channels=40, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[4]/Sequential[conv]/Conv2d[2]/ret.107(EfficientNet::nndct_conv2d_46)
        self.module_47 = py_nndct.nn.Conv2d(in_channels=40, out_channels=240, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[5]/CNNBlock[expand_conv]/Conv2d[cnn]/ret.111(EfficientNet::nndct_conv2d_47)
        self.module_48 = py_nndct.nn.Hardswish(inplace=False) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[5]/CNNBlock[expand_conv]/Hardswish[hard_swish]/ret.115(EfficientNet::nndct_hswish_48)
        self.module_49 = py_nndct.nn.Conv2d(in_channels=240, out_channels=240, kernel_size=[5, 5], stride=[1, 1], padding=[2, 2], dilation=[1, 1], groups=240, bias=True) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[5]/Sequential[conv]/CNNBlock[0]/Conv2d[cnn]/ret.117(EfficientNet::nndct_depthwise_conv2d_49)
        self.module_50 = py_nndct.nn.Hardswish(inplace=False) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[5]/Sequential[conv]/CNNBlock[0]/Hardswish[hard_swish]/ret.121(EfficientNet::nndct_hswish_50)
        self.module_51 = py_nndct.nn.AdaptiveAvgPool2d(output_size=[1, 1]) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[5]/Sequential[conv]/SqueezeExcitation[1]/Sequential[se]/AdaptiveAvgPool2d[0]/23582(EfficientNet::nndct_adaptive_avg_pool2d_51)
        self.module_52 = py_nndct.nn.Conv2d(in_channels=240, out_channels=10, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[5]/Sequential[conv]/SqueezeExcitation[1]/Sequential[se]/Conv2d[1]/ret.123(EfficientNet::nndct_conv2d_52)
        self.module_53 = py_nndct.nn.Hardswish(inplace=False) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[5]/Sequential[conv]/SqueezeExcitation[1]/Sequential[se]/Hardswish[2]/ret.125(EfficientNet::nndct_hswish_53)
        self.module_54 = py_nndct.nn.Conv2d(in_channels=10, out_channels=240, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[5]/Sequential[conv]/SqueezeExcitation[1]/Sequential[se]/Conv2d[3]/ret.127(EfficientNet::nndct_conv2d_54)
        self.module_55 = py_nndct.nn.Sigmoid() #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[5]/Sequential[conv]/SqueezeExcitation[1]/Sequential[se]/Sigmoid[4]/ret.129(EfficientNet::nndct_sigmoid_55)
        self.module_56 = py_nndct.nn.Module('nndct_elemwise_mul') #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[5]/Sequential[conv]/SqueezeExcitation[1]/ret.131(EfficientNet::nndct_elemwise_mul_56)
        self.module_57 = py_nndct.nn.Conv2d(in_channels=240, out_channels=40, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[5]/Sequential[conv]/Conv2d[2]/ret.133(EfficientNet::nndct_conv2d_57)
        self.module_58 = py_nndct.nn.Add() #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[5]/Add[skip_add]/ret.137(EfficientNet::nndct_elemwise_add_58)
        self.module_59 = py_nndct.nn.Conv2d(in_channels=40, out_channels=240, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[6]/CNNBlock[expand_conv]/Conv2d[cnn]/ret.139(EfficientNet::nndct_conv2d_59)
        self.module_60 = py_nndct.nn.Hardswish(inplace=False) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[6]/CNNBlock[expand_conv]/Hardswish[hard_swish]/ret.143(EfficientNet::nndct_hswish_60)
        self.module_61 = py_nndct.nn.Conv2d(in_channels=240, out_channels=240, kernel_size=[3, 3], stride=[2, 2], padding=[1, 1], dilation=[1, 1], groups=240, bias=True) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[6]/Sequential[conv]/CNNBlock[0]/Conv2d[cnn]/ret.145(EfficientNet::nndct_depthwise_conv2d_61)
        self.module_62 = py_nndct.nn.Hardswish(inplace=False) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[6]/Sequential[conv]/CNNBlock[0]/Hardswish[hard_swish]/ret.149(EfficientNet::nndct_hswish_62)
        self.module_63 = py_nndct.nn.AdaptiveAvgPool2d(output_size=[1, 1]) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[6]/Sequential[conv]/SqueezeExcitation[1]/Sequential[se]/AdaptiveAvgPool2d[0]/23766(EfficientNet::nndct_adaptive_avg_pool2d_63)
        self.module_64 = py_nndct.nn.Conv2d(in_channels=240, out_channels=10, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[6]/Sequential[conv]/SqueezeExcitation[1]/Sequential[se]/Conv2d[1]/ret.151(EfficientNet::nndct_conv2d_64)
        self.module_65 = py_nndct.nn.Hardswish(inplace=False) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[6]/Sequential[conv]/SqueezeExcitation[1]/Sequential[se]/Hardswish[2]/ret.153(EfficientNet::nndct_hswish_65)
        self.module_66 = py_nndct.nn.Conv2d(in_channels=10, out_channels=240, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[6]/Sequential[conv]/SqueezeExcitation[1]/Sequential[se]/Conv2d[3]/ret.155(EfficientNet::nndct_conv2d_66)
        self.module_67 = py_nndct.nn.Sigmoid() #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[6]/Sequential[conv]/SqueezeExcitation[1]/Sequential[se]/Sigmoid[4]/ret.157(EfficientNet::nndct_sigmoid_67)
        self.module_68 = py_nndct.nn.Module('nndct_elemwise_mul') #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[6]/Sequential[conv]/SqueezeExcitation[1]/ret.159(EfficientNet::nndct_elemwise_mul_68)
        self.module_69 = py_nndct.nn.Conv2d(in_channels=240, out_channels=80, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[6]/Sequential[conv]/Conv2d[2]/ret.161(EfficientNet::nndct_conv2d_69)
        self.module_70 = py_nndct.nn.Conv2d(in_channels=80, out_channels=480, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[7]/CNNBlock[expand_conv]/Conv2d[cnn]/ret.165(EfficientNet::nndct_conv2d_70)
        self.module_71 = py_nndct.nn.Hardswish(inplace=False) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[7]/CNNBlock[expand_conv]/Hardswish[hard_swish]/ret.169(EfficientNet::nndct_hswish_71)
        self.module_72 = py_nndct.nn.Conv2d(in_channels=480, out_channels=480, kernel_size=[3, 3], stride=[1, 1], padding=[1, 1], dilation=[1, 1], groups=480, bias=True) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[7]/Sequential[conv]/CNNBlock[0]/Conv2d[cnn]/ret.171(EfficientNet::nndct_depthwise_conv2d_72)
        self.module_73 = py_nndct.nn.Hardswish(inplace=False) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[7]/Sequential[conv]/CNNBlock[0]/Hardswish[hard_swish]/ret.175(EfficientNet::nndct_hswish_73)
        self.module_74 = py_nndct.nn.AdaptiveAvgPool2d(output_size=[1, 1]) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[7]/Sequential[conv]/SqueezeExcitation[1]/Sequential[se]/AdaptiveAvgPool2d[0]/23947(EfficientNet::nndct_adaptive_avg_pool2d_74)
        self.module_75 = py_nndct.nn.Conv2d(in_channels=480, out_channels=20, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[7]/Sequential[conv]/SqueezeExcitation[1]/Sequential[se]/Conv2d[1]/ret.177(EfficientNet::nndct_conv2d_75)
        self.module_76 = py_nndct.nn.Hardswish(inplace=False) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[7]/Sequential[conv]/SqueezeExcitation[1]/Sequential[se]/Hardswish[2]/ret.179(EfficientNet::nndct_hswish_76)
        self.module_77 = py_nndct.nn.Conv2d(in_channels=20, out_channels=480, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[7]/Sequential[conv]/SqueezeExcitation[1]/Sequential[se]/Conv2d[3]/ret.181(EfficientNet::nndct_conv2d_77)
        self.module_78 = py_nndct.nn.Sigmoid() #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[7]/Sequential[conv]/SqueezeExcitation[1]/Sequential[se]/Sigmoid[4]/ret.183(EfficientNet::nndct_sigmoid_78)
        self.module_79 = py_nndct.nn.Module('nndct_elemwise_mul') #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[7]/Sequential[conv]/SqueezeExcitation[1]/ret.185(EfficientNet::nndct_elemwise_mul_79)
        self.module_80 = py_nndct.nn.Conv2d(in_channels=480, out_channels=80, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[7]/Sequential[conv]/Conv2d[2]/ret.187(EfficientNet::nndct_conv2d_80)
        self.module_81 = py_nndct.nn.Add() #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[7]/Add[skip_add]/ret.191(EfficientNet::nndct_elemwise_add_81)
        self.module_82 = py_nndct.nn.Conv2d(in_channels=80, out_channels=480, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[8]/CNNBlock[expand_conv]/Conv2d[cnn]/ret.193(EfficientNet::nndct_conv2d_82)
        self.module_83 = py_nndct.nn.Hardswish(inplace=False) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[8]/CNNBlock[expand_conv]/Hardswish[hard_swish]/ret.197(EfficientNet::nndct_hswish_83)
        self.module_84 = py_nndct.nn.Conv2d(in_channels=480, out_channels=480, kernel_size=[3, 3], stride=[1, 1], padding=[1, 1], dilation=[1, 1], groups=480, bias=True) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[8]/Sequential[conv]/CNNBlock[0]/Conv2d[cnn]/ret.199(EfficientNet::nndct_depthwise_conv2d_84)
        self.module_85 = py_nndct.nn.Hardswish(inplace=False) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[8]/Sequential[conv]/CNNBlock[0]/Hardswish[hard_swish]/ret.203(EfficientNet::nndct_hswish_85)
        self.module_86 = py_nndct.nn.AdaptiveAvgPool2d(output_size=[1, 1]) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[8]/Sequential[conv]/SqueezeExcitation[1]/Sequential[se]/AdaptiveAvgPool2d[0]/24131(EfficientNet::nndct_adaptive_avg_pool2d_86)
        self.module_87 = py_nndct.nn.Conv2d(in_channels=480, out_channels=20, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[8]/Sequential[conv]/SqueezeExcitation[1]/Sequential[se]/Conv2d[1]/ret.205(EfficientNet::nndct_conv2d_87)
        self.module_88 = py_nndct.nn.Hardswish(inplace=False) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[8]/Sequential[conv]/SqueezeExcitation[1]/Sequential[se]/Hardswish[2]/ret.207(EfficientNet::nndct_hswish_88)
        self.module_89 = py_nndct.nn.Conv2d(in_channels=20, out_channels=480, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[8]/Sequential[conv]/SqueezeExcitation[1]/Sequential[se]/Conv2d[3]/ret.209(EfficientNet::nndct_conv2d_89)
        self.module_90 = py_nndct.nn.Sigmoid() #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[8]/Sequential[conv]/SqueezeExcitation[1]/Sequential[se]/Sigmoid[4]/ret.211(EfficientNet::nndct_sigmoid_90)
        self.module_91 = py_nndct.nn.Module('nndct_elemwise_mul') #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[8]/Sequential[conv]/SqueezeExcitation[1]/ret.213(EfficientNet::nndct_elemwise_mul_91)
        self.module_92 = py_nndct.nn.Conv2d(in_channels=480, out_channels=80, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[8]/Sequential[conv]/Conv2d[2]/ret.215(EfficientNet::nndct_conv2d_92)
        self.module_93 = py_nndct.nn.Add() #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[8]/Add[skip_add]/ret.219(EfficientNet::nndct_elemwise_add_93)
        self.module_94 = py_nndct.nn.Conv2d(in_channels=80, out_channels=480, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[9]/CNNBlock[expand_conv]/Conv2d[cnn]/ret.221(EfficientNet::nndct_conv2d_94)
        self.module_95 = py_nndct.nn.Hardswish(inplace=False) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[9]/CNNBlock[expand_conv]/Hardswish[hard_swish]/ret.225(EfficientNet::nndct_hswish_95)
        self.module_96 = py_nndct.nn.Conv2d(in_channels=480, out_channels=480, kernel_size=[5, 5], stride=[1, 1], padding=[2, 2], dilation=[1, 1], groups=480, bias=True) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[9]/Sequential[conv]/CNNBlock[0]/Conv2d[cnn]/ret.227(EfficientNet::nndct_depthwise_conv2d_96)
        self.module_97 = py_nndct.nn.Hardswish(inplace=False) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[9]/Sequential[conv]/CNNBlock[0]/Hardswish[hard_swish]/ret.231(EfficientNet::nndct_hswish_97)
        self.module_98 = py_nndct.nn.AdaptiveAvgPool2d(output_size=[1, 1]) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[9]/Sequential[conv]/SqueezeExcitation[1]/Sequential[se]/AdaptiveAvgPool2d[0]/24315(EfficientNet::nndct_adaptive_avg_pool2d_98)
        self.module_99 = py_nndct.nn.Conv2d(in_channels=480, out_channels=20, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[9]/Sequential[conv]/SqueezeExcitation[1]/Sequential[se]/Conv2d[1]/ret.233(EfficientNet::nndct_conv2d_99)
        self.module_100 = py_nndct.nn.Hardswish(inplace=False) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[9]/Sequential[conv]/SqueezeExcitation[1]/Sequential[se]/Hardswish[2]/ret.235(EfficientNet::nndct_hswish_100)
        self.module_101 = py_nndct.nn.Conv2d(in_channels=20, out_channels=480, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[9]/Sequential[conv]/SqueezeExcitation[1]/Sequential[se]/Conv2d[3]/ret.237(EfficientNet::nndct_conv2d_101)
        self.module_102 = py_nndct.nn.Sigmoid() #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[9]/Sequential[conv]/SqueezeExcitation[1]/Sequential[se]/Sigmoid[4]/ret.239(EfficientNet::nndct_sigmoid_102)
        self.module_103 = py_nndct.nn.Module('nndct_elemwise_mul') #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[9]/Sequential[conv]/SqueezeExcitation[1]/ret.241(EfficientNet::nndct_elemwise_mul_103)
        self.module_104 = py_nndct.nn.Conv2d(in_channels=480, out_channels=112, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[9]/Sequential[conv]/Conv2d[2]/ret.243(EfficientNet::nndct_conv2d_104)
        self.module_105 = py_nndct.nn.Conv2d(in_channels=112, out_channels=672, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[10]/CNNBlock[expand_conv]/Conv2d[cnn]/ret.247(EfficientNet::nndct_conv2d_105)
        self.module_106 = py_nndct.nn.Hardswish(inplace=False) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[10]/CNNBlock[expand_conv]/Hardswish[hard_swish]/ret.251(EfficientNet::nndct_hswish_106)
        self.module_107 = py_nndct.nn.Conv2d(in_channels=672, out_channels=672, kernel_size=[5, 5], stride=[1, 1], padding=[2, 2], dilation=[1, 1], groups=672, bias=True) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[10]/Sequential[conv]/CNNBlock[0]/Conv2d[cnn]/ret.253(EfficientNet::nndct_depthwise_conv2d_107)
        self.module_108 = py_nndct.nn.Hardswish(inplace=False) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[10]/Sequential[conv]/CNNBlock[0]/Hardswish[hard_swish]/ret.257(EfficientNet::nndct_hswish_108)
        self.module_109 = py_nndct.nn.AdaptiveAvgPool2d(output_size=[1, 1]) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[10]/Sequential[conv]/SqueezeExcitation[1]/Sequential[se]/AdaptiveAvgPool2d[0]/24496(EfficientNet::nndct_adaptive_avg_pool2d_109)
        self.module_110 = py_nndct.nn.Conv2d(in_channels=672, out_channels=28, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[10]/Sequential[conv]/SqueezeExcitation[1]/Sequential[se]/Conv2d[1]/ret.259(EfficientNet::nndct_conv2d_110)
        self.module_111 = py_nndct.nn.Hardswish(inplace=False) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[10]/Sequential[conv]/SqueezeExcitation[1]/Sequential[se]/Hardswish[2]/ret.261(EfficientNet::nndct_hswish_111)
        self.module_112 = py_nndct.nn.Conv2d(in_channels=28, out_channels=672, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[10]/Sequential[conv]/SqueezeExcitation[1]/Sequential[se]/Conv2d[3]/ret.263(EfficientNet::nndct_conv2d_112)
        self.module_113 = py_nndct.nn.Sigmoid() #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[10]/Sequential[conv]/SqueezeExcitation[1]/Sequential[se]/Sigmoid[4]/ret.265(EfficientNet::nndct_sigmoid_113)
        self.module_114 = py_nndct.nn.Module('nndct_elemwise_mul') #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[10]/Sequential[conv]/SqueezeExcitation[1]/ret.267(EfficientNet::nndct_elemwise_mul_114)
        self.module_115 = py_nndct.nn.Conv2d(in_channels=672, out_channels=112, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[10]/Sequential[conv]/Conv2d[2]/ret.269(EfficientNet::nndct_conv2d_115)
        self.module_116 = py_nndct.nn.Add() #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[10]/Add[skip_add]/ret.273(EfficientNet::nndct_elemwise_add_116)
        self.module_117 = py_nndct.nn.Conv2d(in_channels=112, out_channels=672, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[11]/CNNBlock[expand_conv]/Conv2d[cnn]/ret.275(EfficientNet::nndct_conv2d_117)
        self.module_118 = py_nndct.nn.Hardswish(inplace=False) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[11]/CNNBlock[expand_conv]/Hardswish[hard_swish]/ret.279(EfficientNet::nndct_hswish_118)
        self.module_119 = py_nndct.nn.Conv2d(in_channels=672, out_channels=672, kernel_size=[5, 5], stride=[1, 1], padding=[2, 2], dilation=[1, 1], groups=672, bias=True) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[11]/Sequential[conv]/CNNBlock[0]/Conv2d[cnn]/ret.281(EfficientNet::nndct_depthwise_conv2d_119)
        self.module_120 = py_nndct.nn.Hardswish(inplace=False) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[11]/Sequential[conv]/CNNBlock[0]/Hardswish[hard_swish]/ret.285(EfficientNet::nndct_hswish_120)
        self.module_121 = py_nndct.nn.AdaptiveAvgPool2d(output_size=[1, 1]) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[11]/Sequential[conv]/SqueezeExcitation[1]/Sequential[se]/AdaptiveAvgPool2d[0]/24680(EfficientNet::nndct_adaptive_avg_pool2d_121)
        self.module_122 = py_nndct.nn.Conv2d(in_channels=672, out_channels=28, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[11]/Sequential[conv]/SqueezeExcitation[1]/Sequential[se]/Conv2d[1]/ret.287(EfficientNet::nndct_conv2d_122)
        self.module_123 = py_nndct.nn.Hardswish(inplace=False) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[11]/Sequential[conv]/SqueezeExcitation[1]/Sequential[se]/Hardswish[2]/ret.289(EfficientNet::nndct_hswish_123)
        self.module_124 = py_nndct.nn.Conv2d(in_channels=28, out_channels=672, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[11]/Sequential[conv]/SqueezeExcitation[1]/Sequential[se]/Conv2d[3]/ret.291(EfficientNet::nndct_conv2d_124)
        self.module_125 = py_nndct.nn.Sigmoid() #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[11]/Sequential[conv]/SqueezeExcitation[1]/Sequential[se]/Sigmoid[4]/ret.293(EfficientNet::nndct_sigmoid_125)
        self.module_126 = py_nndct.nn.Module('nndct_elemwise_mul') #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[11]/Sequential[conv]/SqueezeExcitation[1]/ret.295(EfficientNet::nndct_elemwise_mul_126)
        self.module_127 = py_nndct.nn.Conv2d(in_channels=672, out_channels=112, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[11]/Sequential[conv]/Conv2d[2]/ret.297(EfficientNet::nndct_conv2d_127)
        self.module_128 = py_nndct.nn.Add() #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[11]/Add[skip_add]/ret.301(EfficientNet::nndct_elemwise_add_128)
        self.module_129 = py_nndct.nn.Conv2d(in_channels=112, out_channels=672, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[12]/CNNBlock[expand_conv]/Conv2d[cnn]/ret.303(EfficientNet::nndct_conv2d_129)
        self.module_130 = py_nndct.nn.Hardswish(inplace=False) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[12]/CNNBlock[expand_conv]/Hardswish[hard_swish]/ret.307(EfficientNet::nndct_hswish_130)
        self.module_131 = py_nndct.nn.Conv2d(in_channels=672, out_channels=672, kernel_size=[5, 5], stride=[2, 2], padding=[2, 2], dilation=[1, 1], groups=672, bias=True) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[12]/Sequential[conv]/CNNBlock[0]/Conv2d[cnn]/ret.309(EfficientNet::nndct_depthwise_conv2d_131)
        self.module_132 = py_nndct.nn.Hardswish(inplace=False) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[12]/Sequential[conv]/CNNBlock[0]/Hardswish[hard_swish]/ret.313(EfficientNet::nndct_hswish_132)
        self.module_133 = py_nndct.nn.AdaptiveAvgPool2d(output_size=[1, 1]) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[12]/Sequential[conv]/SqueezeExcitation[1]/Sequential[se]/AdaptiveAvgPool2d[0]/24864(EfficientNet::nndct_adaptive_avg_pool2d_133)
        self.module_134 = py_nndct.nn.Conv2d(in_channels=672, out_channels=28, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[12]/Sequential[conv]/SqueezeExcitation[1]/Sequential[se]/Conv2d[1]/ret.315(EfficientNet::nndct_conv2d_134)
        self.module_135 = py_nndct.nn.Hardswish(inplace=False) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[12]/Sequential[conv]/SqueezeExcitation[1]/Sequential[se]/Hardswish[2]/ret.317(EfficientNet::nndct_hswish_135)
        self.module_136 = py_nndct.nn.Conv2d(in_channels=28, out_channels=672, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[12]/Sequential[conv]/SqueezeExcitation[1]/Sequential[se]/Conv2d[3]/ret.319(EfficientNet::nndct_conv2d_136)
        self.module_137 = py_nndct.nn.Sigmoid() #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[12]/Sequential[conv]/SqueezeExcitation[1]/Sequential[se]/Sigmoid[4]/ret.321(EfficientNet::nndct_sigmoid_137)
        self.module_138 = py_nndct.nn.Module('nndct_elemwise_mul') #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[12]/Sequential[conv]/SqueezeExcitation[1]/ret.323(EfficientNet::nndct_elemwise_mul_138)
        self.module_139 = py_nndct.nn.Conv2d(in_channels=672, out_channels=192, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[12]/Sequential[conv]/Conv2d[2]/ret.325(EfficientNet::nndct_conv2d_139)
        self.module_140 = py_nndct.nn.Conv2d(in_channels=192, out_channels=1152, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[13]/CNNBlock[expand_conv]/Conv2d[cnn]/ret.329(EfficientNet::nndct_conv2d_140)
        self.module_141 = py_nndct.nn.Hardswish(inplace=False) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[13]/CNNBlock[expand_conv]/Hardswish[hard_swish]/ret.333(EfficientNet::nndct_hswish_141)
        self.module_142 = py_nndct.nn.Conv2d(in_channels=1152, out_channels=1152, kernel_size=[5, 5], stride=[1, 1], padding=[2, 2], dilation=[1, 1], groups=1152, bias=True) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[13]/Sequential[conv]/CNNBlock[0]/Conv2d[cnn]/ret.335(EfficientNet::nndct_depthwise_conv2d_142)
        self.module_143 = py_nndct.nn.Hardswish(inplace=False) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[13]/Sequential[conv]/CNNBlock[0]/Hardswish[hard_swish]/ret.339(EfficientNet::nndct_hswish_143)
        self.module_144 = py_nndct.nn.AdaptiveAvgPool2d(output_size=[1, 1]) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[13]/Sequential[conv]/SqueezeExcitation[1]/Sequential[se]/AdaptiveAvgPool2d[0]/25045(EfficientNet::nndct_adaptive_avg_pool2d_144)
        self.module_145 = py_nndct.nn.Conv2d(in_channels=1152, out_channels=48, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[13]/Sequential[conv]/SqueezeExcitation[1]/Sequential[se]/Conv2d[1]/ret.341(EfficientNet::nndct_conv2d_145)
        self.module_146 = py_nndct.nn.Hardswish(inplace=False) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[13]/Sequential[conv]/SqueezeExcitation[1]/Sequential[se]/Hardswish[2]/ret.343(EfficientNet::nndct_hswish_146)
        self.module_147 = py_nndct.nn.Conv2d(in_channels=48, out_channels=1152, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[13]/Sequential[conv]/SqueezeExcitation[1]/Sequential[se]/Conv2d[3]/ret.345(EfficientNet::nndct_conv2d_147)
        self.module_148 = py_nndct.nn.Sigmoid() #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[13]/Sequential[conv]/SqueezeExcitation[1]/Sequential[se]/Sigmoid[4]/ret.347(EfficientNet::nndct_sigmoid_148)
        self.module_149 = py_nndct.nn.Module('nndct_elemwise_mul') #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[13]/Sequential[conv]/SqueezeExcitation[1]/ret.349(EfficientNet::nndct_elemwise_mul_149)
        self.module_150 = py_nndct.nn.Conv2d(in_channels=1152, out_channels=192, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[13]/Sequential[conv]/Conv2d[2]/ret.351(EfficientNet::nndct_conv2d_150)
        self.module_151 = py_nndct.nn.Add() #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[13]/Add[skip_add]/ret.355(EfficientNet::nndct_elemwise_add_151)
        self.module_152 = py_nndct.nn.Conv2d(in_channels=192, out_channels=1152, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[14]/CNNBlock[expand_conv]/Conv2d[cnn]/ret.357(EfficientNet::nndct_conv2d_152)
        self.module_153 = py_nndct.nn.Hardswish(inplace=False) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[14]/CNNBlock[expand_conv]/Hardswish[hard_swish]/ret.361(EfficientNet::nndct_hswish_153)
        self.module_154 = py_nndct.nn.Conv2d(in_channels=1152, out_channels=1152, kernel_size=[5, 5], stride=[1, 1], padding=[2, 2], dilation=[1, 1], groups=1152, bias=True) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[14]/Sequential[conv]/CNNBlock[0]/Conv2d[cnn]/ret.363(EfficientNet::nndct_depthwise_conv2d_154)
        self.module_155 = py_nndct.nn.Hardswish(inplace=False) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[14]/Sequential[conv]/CNNBlock[0]/Hardswish[hard_swish]/ret.367(EfficientNet::nndct_hswish_155)
        self.module_156 = py_nndct.nn.AdaptiveAvgPool2d(output_size=[1, 1]) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[14]/Sequential[conv]/SqueezeExcitation[1]/Sequential[se]/AdaptiveAvgPool2d[0]/25229(EfficientNet::nndct_adaptive_avg_pool2d_156)
        self.module_157 = py_nndct.nn.Conv2d(in_channels=1152, out_channels=48, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[14]/Sequential[conv]/SqueezeExcitation[1]/Sequential[se]/Conv2d[1]/ret.369(EfficientNet::nndct_conv2d_157)
        self.module_158 = py_nndct.nn.Hardswish(inplace=False) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[14]/Sequential[conv]/SqueezeExcitation[1]/Sequential[se]/Hardswish[2]/ret.371(EfficientNet::nndct_hswish_158)
        self.module_159 = py_nndct.nn.Conv2d(in_channels=48, out_channels=1152, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[14]/Sequential[conv]/SqueezeExcitation[1]/Sequential[se]/Conv2d[3]/ret.373(EfficientNet::nndct_conv2d_159)
        self.module_160 = py_nndct.nn.Sigmoid() #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[14]/Sequential[conv]/SqueezeExcitation[1]/Sequential[se]/Sigmoid[4]/ret.375(EfficientNet::nndct_sigmoid_160)
        self.module_161 = py_nndct.nn.Module('nndct_elemwise_mul') #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[14]/Sequential[conv]/SqueezeExcitation[1]/ret.377(EfficientNet::nndct_elemwise_mul_161)
        self.module_162 = py_nndct.nn.Conv2d(in_channels=1152, out_channels=192, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[14]/Sequential[conv]/Conv2d[2]/ret.379(EfficientNet::nndct_conv2d_162)
        self.module_163 = py_nndct.nn.Add() #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[14]/Add[skip_add]/ret.383(EfficientNet::nndct_elemwise_add_163)
        self.module_164 = py_nndct.nn.Conv2d(in_channels=192, out_channels=1152, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[15]/CNNBlock[expand_conv]/Conv2d[cnn]/ret.385(EfficientNet::nndct_conv2d_164)
        self.module_165 = py_nndct.nn.Hardswish(inplace=False) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[15]/CNNBlock[expand_conv]/Hardswish[hard_swish]/ret.389(EfficientNet::nndct_hswish_165)
        self.module_166 = py_nndct.nn.Conv2d(in_channels=1152, out_channels=1152, kernel_size=[5, 5], stride=[1, 1], padding=[2, 2], dilation=[1, 1], groups=1152, bias=True) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[15]/Sequential[conv]/CNNBlock[0]/Conv2d[cnn]/ret.391(EfficientNet::nndct_depthwise_conv2d_166)
        self.module_167 = py_nndct.nn.Hardswish(inplace=False) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[15]/Sequential[conv]/CNNBlock[0]/Hardswish[hard_swish]/ret.395(EfficientNet::nndct_hswish_167)
        self.module_168 = py_nndct.nn.AdaptiveAvgPool2d(output_size=[1, 1]) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[15]/Sequential[conv]/SqueezeExcitation[1]/Sequential[se]/AdaptiveAvgPool2d[0]/25413(EfficientNet::nndct_adaptive_avg_pool2d_168)
        self.module_169 = py_nndct.nn.Conv2d(in_channels=1152, out_channels=48, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[15]/Sequential[conv]/SqueezeExcitation[1]/Sequential[se]/Conv2d[1]/ret.397(EfficientNet::nndct_conv2d_169)
        self.module_170 = py_nndct.nn.Hardswish(inplace=False) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[15]/Sequential[conv]/SqueezeExcitation[1]/Sequential[se]/Hardswish[2]/ret.399(EfficientNet::nndct_hswish_170)
        self.module_171 = py_nndct.nn.Conv2d(in_channels=48, out_channels=1152, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[15]/Sequential[conv]/SqueezeExcitation[1]/Sequential[se]/Conv2d[3]/ret.401(EfficientNet::nndct_conv2d_171)
        self.module_172 = py_nndct.nn.Sigmoid() #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[15]/Sequential[conv]/SqueezeExcitation[1]/Sequential[se]/Sigmoid[4]/ret.403(EfficientNet::nndct_sigmoid_172)
        self.module_173 = py_nndct.nn.Module('nndct_elemwise_mul') #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[15]/Sequential[conv]/SqueezeExcitation[1]/ret.405(EfficientNet::nndct_elemwise_mul_173)
        self.module_174 = py_nndct.nn.Conv2d(in_channels=1152, out_channels=192, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[15]/Sequential[conv]/Conv2d[2]/ret.407(EfficientNet::nndct_conv2d_174)
        self.module_175 = py_nndct.nn.Add() #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[15]/Add[skip_add]/ret.411(EfficientNet::nndct_elemwise_add_175)
        self.module_176 = py_nndct.nn.Conv2d(in_channels=192, out_channels=1152, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[16]/CNNBlock[expand_conv]/Conv2d[cnn]/ret.413(EfficientNet::nndct_conv2d_176)
        self.module_177 = py_nndct.nn.Hardswish(inplace=False) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[16]/CNNBlock[expand_conv]/Hardswish[hard_swish]/ret.417(EfficientNet::nndct_hswish_177)
        self.module_178 = py_nndct.nn.Conv2d(in_channels=1152, out_channels=1152, kernel_size=[3, 3], stride=[1, 1], padding=[1, 1], dilation=[1, 1], groups=1152, bias=True) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[16]/Sequential[conv]/CNNBlock[0]/Conv2d[cnn]/ret.419(EfficientNet::nndct_depthwise_conv2d_178)
        self.module_179 = py_nndct.nn.Hardswish(inplace=False) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[16]/Sequential[conv]/CNNBlock[0]/Hardswish[hard_swish]/ret.423(EfficientNet::nndct_hswish_179)
        self.module_180 = py_nndct.nn.AdaptiveAvgPool2d(output_size=[1, 1]) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[16]/Sequential[conv]/SqueezeExcitation[1]/Sequential[se]/AdaptiveAvgPool2d[0]/25597(EfficientNet::nndct_adaptive_avg_pool2d_180)
        self.module_181 = py_nndct.nn.Conv2d(in_channels=1152, out_channels=48, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[16]/Sequential[conv]/SqueezeExcitation[1]/Sequential[se]/Conv2d[1]/ret.425(EfficientNet::nndct_conv2d_181)
        self.module_182 = py_nndct.nn.Hardswish(inplace=False) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[16]/Sequential[conv]/SqueezeExcitation[1]/Sequential[se]/Hardswish[2]/ret.427(EfficientNet::nndct_hswish_182)
        self.module_183 = py_nndct.nn.Conv2d(in_channels=48, out_channels=1152, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[16]/Sequential[conv]/SqueezeExcitation[1]/Sequential[se]/Conv2d[3]/ret.429(EfficientNet::nndct_conv2d_183)
        self.module_184 = py_nndct.nn.Sigmoid() #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[16]/Sequential[conv]/SqueezeExcitation[1]/Sequential[se]/Sigmoid[4]/ret.431(EfficientNet::nndct_sigmoid_184)
        self.module_185 = py_nndct.nn.Module('nndct_elemwise_mul') #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[16]/Sequential[conv]/SqueezeExcitation[1]/ret.433(EfficientNet::nndct_elemwise_mul_185)
        self.module_186 = py_nndct.nn.Conv2d(in_channels=1152, out_channels=320, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #EfficientNet::EfficientNet/Sequential[features]/InvertedResidualBlock[16]/Sequential[conv]/Conv2d[2]/ret.435(EfficientNet::nndct_conv2d_186)
        self.module_187 = py_nndct.nn.Conv2d(in_channels=320, out_channels=1280, kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], groups=1, bias=True) #EfficientNet::EfficientNet/Sequential[features]/CNNBlock[17]/Conv2d[cnn]/ret.439(EfficientNet::nndct_conv2d_187)
        self.module_188 = py_nndct.nn.Hardswish(inplace=False) #EfficientNet::EfficientNet/Sequential[features]/CNNBlock[17]/Hardswish[hard_swish]/ret.443(EfficientNet::nndct_hswish_188)
        self.module_189 = py_nndct.nn.AdaptiveAvgPool2d(output_size=[1, 1]) #EfficientNet::EfficientNet/AdaptiveAvgPool2d[pool]/25749(EfficientNet::nndct_adaptive_avg_pool2d_189)
        self.module_190 = py_nndct.nn.Module('nndct_shape') #EfficientNet::EfficientNet/25752(EfficientNet::nndct_shape_190)
        self.module_191 = py_nndct.nn.Module('nndct_reshape') #EfficientNet::EfficientNet/ret.445(EfficientNet::nndct_reshape_191)
        self.module_192 = py_nndct.nn.Linear(in_features=1280, out_features=3, bias=True) #EfficientNet::EfficientNet/Sequential[classifier]/Linear[1]/ret.447(EfficientNet::nndct_dense_192)
        self.module_193 = py_nndct.nn.dequant_output() #EfficientNet::EfficientNet/DeQuantStub[dequant_stub]/25777(EfficientNet::nndct_dequant_stub_193)

    @py_nndct.nn.forward_processor
    def forward(self, *args):
        output_module_0 = self.module_0(input=args[0])
        output_module_0 = self.module_1(input=output_module_0)
        output_module_0 = self.module_2(output_module_0)
        output_module_0 = self.module_3(output_module_0)
        output_module_0 = self.module_4(output_module_0)
        output_module_0 = self.module_5(output_module_0)
        output_module_6 = self.module_6(output_module_0)
        output_module_6 = self.module_7(output_module_6)
        output_module_6 = self.module_8(output_module_6)
        output_module_6 = self.module_9(output_module_6)
        output_module_6 = self.module_10(output_module_6)
        output_module_11 = self.module_11(input=output_module_0, other=output_module_6)
        output_module_11 = self.module_12(output_module_11)
        output_module_11 = self.module_13(output_module_11)
        output_module_11 = self.module_14(output_module_11)
        output_module_11 = self.module_15(output_module_11)
        output_module_11 = self.module_16(output_module_11)
        output_module_17 = self.module_17(output_module_11)
        output_module_17 = self.module_18(output_module_17)
        output_module_17 = self.module_19(output_module_17)
        output_module_17 = self.module_20(output_module_17)
        output_module_17 = self.module_21(output_module_17)
        output_module_22 = self.module_22(input=output_module_11, other=output_module_17)
        output_module_22 = self.module_23(output_module_22)
        output_module_24 = self.module_24(output_module_22)
        output_module_24 = self.module_25(output_module_24)
        output_module_24 = self.module_26(output_module_24)
        output_module_24 = self.module_27(output_module_24)
        output_module_28 = self.module_28(output_module_24)
        output_module_28 = self.module_29(output_module_28)
        output_module_28 = self.module_30(output_module_28)
        output_module_28 = self.module_31(output_module_28)
        output_module_28 = self.module_32(output_module_28)
        output_module_33 = self.module_33(input=output_module_24, other=output_module_28)
        output_module_33 = self.module_34(output_module_33)
        output_module_33 = self.module_35(input=output_module_33, other=output_module_22, alpha=1)
        output_module_33 = self.module_36(output_module_33)
        output_module_33 = self.module_37(output_module_33)
        output_module_33 = self.module_38(output_module_33)
        output_module_33 = self.module_39(output_module_33)
        output_module_40 = self.module_40(output_module_33)
        output_module_40 = self.module_41(output_module_40)
        output_module_40 = self.module_42(output_module_40)
        output_module_40 = self.module_43(output_module_40)
        output_module_40 = self.module_44(output_module_40)
        output_module_45 = self.module_45(input=output_module_33, other=output_module_40)
        output_module_45 = self.module_46(output_module_45)
        output_module_47 = self.module_47(output_module_45)
        output_module_47 = self.module_48(output_module_47)
        output_module_47 = self.module_49(output_module_47)
        output_module_47 = self.module_50(output_module_47)
        output_module_51 = self.module_51(output_module_47)
        output_module_51 = self.module_52(output_module_51)
        output_module_51 = self.module_53(output_module_51)
        output_module_51 = self.module_54(output_module_51)
        output_module_51 = self.module_55(output_module_51)
        output_module_56 = self.module_56(input=output_module_47, other=output_module_51)
        output_module_56 = self.module_57(output_module_56)
        output_module_56 = self.module_58(input=output_module_56, other=output_module_45, alpha=1)
        output_module_56 = self.module_59(output_module_56)
        output_module_56 = self.module_60(output_module_56)
        output_module_56 = self.module_61(output_module_56)
        output_module_56 = self.module_62(output_module_56)
        output_module_63 = self.module_63(output_module_56)
        output_module_63 = self.module_64(output_module_63)
        output_module_63 = self.module_65(output_module_63)
        output_module_63 = self.module_66(output_module_63)
        output_module_63 = self.module_67(output_module_63)
        output_module_68 = self.module_68(input=output_module_56, other=output_module_63)
        output_module_68 = self.module_69(output_module_68)
        output_module_70 = self.module_70(output_module_68)
        output_module_70 = self.module_71(output_module_70)
        output_module_70 = self.module_72(output_module_70)
        output_module_70 = self.module_73(output_module_70)
        output_module_74 = self.module_74(output_module_70)
        output_module_74 = self.module_75(output_module_74)
        output_module_74 = self.module_76(output_module_74)
        output_module_74 = self.module_77(output_module_74)
        output_module_74 = self.module_78(output_module_74)
        output_module_79 = self.module_79(input=output_module_70, other=output_module_74)
        output_module_79 = self.module_80(output_module_79)
        output_module_79 = self.module_81(input=output_module_79, other=output_module_68, alpha=1)
        output_module_82 = self.module_82(output_module_79)
        output_module_82 = self.module_83(output_module_82)
        output_module_82 = self.module_84(output_module_82)
        output_module_82 = self.module_85(output_module_82)
        output_module_86 = self.module_86(output_module_82)
        output_module_86 = self.module_87(output_module_86)
        output_module_86 = self.module_88(output_module_86)
        output_module_86 = self.module_89(output_module_86)
        output_module_86 = self.module_90(output_module_86)
        output_module_91 = self.module_91(input=output_module_82, other=output_module_86)
        output_module_91 = self.module_92(output_module_91)
        output_module_91 = self.module_93(input=output_module_91, other=output_module_79, alpha=1)
        output_module_91 = self.module_94(output_module_91)
        output_module_91 = self.module_95(output_module_91)
        output_module_91 = self.module_96(output_module_91)
        output_module_91 = self.module_97(output_module_91)
        output_module_98 = self.module_98(output_module_91)
        output_module_98 = self.module_99(output_module_98)
        output_module_98 = self.module_100(output_module_98)
        output_module_98 = self.module_101(output_module_98)
        output_module_98 = self.module_102(output_module_98)
        output_module_103 = self.module_103(input=output_module_91, other=output_module_98)
        output_module_103 = self.module_104(output_module_103)
        output_module_105 = self.module_105(output_module_103)
        output_module_105 = self.module_106(output_module_105)
        output_module_105 = self.module_107(output_module_105)
        output_module_105 = self.module_108(output_module_105)
        output_module_109 = self.module_109(output_module_105)
        output_module_109 = self.module_110(output_module_109)
        output_module_109 = self.module_111(output_module_109)
        output_module_109 = self.module_112(output_module_109)
        output_module_109 = self.module_113(output_module_109)
        output_module_114 = self.module_114(input=output_module_105, other=output_module_109)
        output_module_114 = self.module_115(output_module_114)
        output_module_114 = self.module_116(input=output_module_114, other=output_module_103, alpha=1)
        output_module_117 = self.module_117(output_module_114)
        output_module_117 = self.module_118(output_module_117)
        output_module_117 = self.module_119(output_module_117)
        output_module_117 = self.module_120(output_module_117)
        output_module_121 = self.module_121(output_module_117)
        output_module_121 = self.module_122(output_module_121)
        output_module_121 = self.module_123(output_module_121)
        output_module_121 = self.module_124(output_module_121)
        output_module_121 = self.module_125(output_module_121)
        output_module_126 = self.module_126(input=output_module_117, other=output_module_121)
        output_module_126 = self.module_127(output_module_126)
        output_module_126 = self.module_128(input=output_module_126, other=output_module_114, alpha=1)
        output_module_126 = self.module_129(output_module_126)
        output_module_126 = self.module_130(output_module_126)
        output_module_126 = self.module_131(output_module_126)
        output_module_126 = self.module_132(output_module_126)
        output_module_133 = self.module_133(output_module_126)
        output_module_133 = self.module_134(output_module_133)
        output_module_133 = self.module_135(output_module_133)
        output_module_133 = self.module_136(output_module_133)
        output_module_133 = self.module_137(output_module_133)
        output_module_138 = self.module_138(input=output_module_126, other=output_module_133)
        output_module_138 = self.module_139(output_module_138)
        output_module_140 = self.module_140(output_module_138)
        output_module_140 = self.module_141(output_module_140)
        output_module_140 = self.module_142(output_module_140)
        output_module_140 = self.module_143(output_module_140)
        output_module_144 = self.module_144(output_module_140)
        output_module_144 = self.module_145(output_module_144)
        output_module_144 = self.module_146(output_module_144)
        output_module_144 = self.module_147(output_module_144)
        output_module_144 = self.module_148(output_module_144)
        output_module_149 = self.module_149(input=output_module_140, other=output_module_144)
        output_module_149 = self.module_150(output_module_149)
        output_module_149 = self.module_151(input=output_module_149, other=output_module_138, alpha=1)
        output_module_152 = self.module_152(output_module_149)
        output_module_152 = self.module_153(output_module_152)
        output_module_152 = self.module_154(output_module_152)
        output_module_152 = self.module_155(output_module_152)
        output_module_156 = self.module_156(output_module_152)
        output_module_156 = self.module_157(output_module_156)
        output_module_156 = self.module_158(output_module_156)
        output_module_156 = self.module_159(output_module_156)
        output_module_156 = self.module_160(output_module_156)
        output_module_161 = self.module_161(input=output_module_152, other=output_module_156)
        output_module_161 = self.module_162(output_module_161)
        output_module_161 = self.module_163(input=output_module_161, other=output_module_149, alpha=1)
        output_module_164 = self.module_164(output_module_161)
        output_module_164 = self.module_165(output_module_164)
        output_module_164 = self.module_166(output_module_164)
        output_module_164 = self.module_167(output_module_164)
        output_module_168 = self.module_168(output_module_164)
        output_module_168 = self.module_169(output_module_168)
        output_module_168 = self.module_170(output_module_168)
        output_module_168 = self.module_171(output_module_168)
        output_module_168 = self.module_172(output_module_168)
        output_module_173 = self.module_173(input=output_module_164, other=output_module_168)
        output_module_173 = self.module_174(output_module_173)
        output_module_173 = self.module_175(input=output_module_173, other=output_module_161, alpha=1)
        output_module_173 = self.module_176(output_module_173)
        output_module_173 = self.module_177(output_module_173)
        output_module_173 = self.module_178(output_module_173)
        output_module_173 = self.module_179(output_module_173)
        output_module_180 = self.module_180(output_module_173)
        output_module_180 = self.module_181(output_module_180)
        output_module_180 = self.module_182(output_module_180)
        output_module_180 = self.module_183(output_module_180)
        output_module_180 = self.module_184(output_module_180)
        output_module_185 = self.module_185(input=output_module_173, other=output_module_180)
        output_module_185 = self.module_186(output_module_185)
        output_module_185 = self.module_187(output_module_185)
        output_module_185 = self.module_188(output_module_185)
        output_module_185 = self.module_189(output_module_185)
        output_module_190 = self.module_190(input=output_module_185, dim=0)
        output_module_191 = self.module_191(input=output_module_185, shape=[output_module_190,-1])
        output_module_191 = self.module_192(output_module_191)
        output_module_191 = self.module_193(input=output_module_191)
        return output_module_191
